name: container_builder

on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      username:
        required: true
        type: string
      release:
        required: true
        type: boolean
      builderMatrix:
        required: true
        type: string
    secrets:
      password:
        required: true

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix: ${{fromJson(inputs.builderMatrix)}}
    env:
      baseTag: ${{inputs.registry}}/${{inputs.username}}/${{matrix.name}}
    name: ${{matrix.name}}:${{matrix.mainTag}}
    steps:

      - name: Maximize Build Space
        if: ${{matrix.maximizeBuildSpace}}
        run: |
          echo "Available storage (pre cleanup):"
          df -h
          echo
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/share/swift
          docker system prune -a -f --filter "until=10m"
          echo "Available storage (after cleanup):"
          df -h

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        run: |
          echo ${{secrets.password}} | docker login ${{inputs.registry}} -u ${{inputs.username}} --password-stdin

      - name: Generate Docker Staging Metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{env.baseTag}}
          flavor: |
            latest=false
            suffix=-staging,onlatest=true
          tags: ${{matrix.tags}}

      - name: Build and Push as Staging
        uses: docker/build-push-action@v6
        with:
          context: ./${{matrix.name}}
          file: ./${{matrix.name}}/${{matrix.dockerfile}}
          tags: ${{env.DOCKER_METADATA_OUTPUT_TAGS}}
          platforms: ${{matrix.platforms}}
          build-args: ${{matrix.args}}
          push: true # staging is always pushed
          load: true # make available for tests
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Test Script
        if: ${{matrix.testScript != ''}}
        working-directory: ./${{matrix.name}}
        shell: bash
        run: ./${{matrix.testScript}} ${{matrix.mainTag}}

      - name: Scan Container with Trivy
        if: ${{!matrix.trivySkip}}
        uses: aquasecurity/trivy-action@master
        with:
          scanners: vuln
          image-ref: ${{env.baseTag}}:${{matrix.mainTag}}-staging
          ignore-unfixed: true
          format: sarif
          output: trivy-results.sarif
          timeout: 20m0s

      - name: Scan Container with Dockle
        if: ${{!matrix.dockleSkip}}
        uses: erzz/dockle-action@v1.4.0
        with:
          image: ${{env.baseTag}}:${{matrix.mainTag}}-staging
          failure-threshold: FATAL
          timeout: 20m
          accept-extensions: ${{matrix.dockleAcceptExt}}
          report-format: sarif

      - name: Upload Scan Results
        if: ${{!matrix.trivySkip || !matrix.dockleSkip}}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .

      - name: Generate Docker Release Metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{env.baseTag}}
          flavor: |
            latest=false
          tags: ${{matrix.tags}}

      - name: Push Container as Released
        if: ${{inputs.release && !matrix.intermediate}}
        uses: docker/build-push-action@v6
        with:
          context: ./${{matrix.name}}
          file: ./${{matrix.name}}/${{matrix.dockerfile}}
          tags: ${{env.DOCKER_METADATA_OUTPUT_TAGS}}
          platforms: ${{matrix.platforms}}
          build-args: ${{matrix.args}}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Logout from Registry
        if: ${{always()}}
        run: docker logout ${{inputs.registry}}
